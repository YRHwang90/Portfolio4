library(lme4)
library(texreg)
knitr::opts_chunk$set(echo = TRUE)
# sample size
N<-100 # number of group
nj<- 20 # cluster/group size
# fixed effect parameter
gamma00<- 5
gamma01<- 2
gamma10<- 3
# set the variance of random coeffiencts
tau2<-2
sigma2<-4
R.intercept<-matrix(,nrow=N*nj,ncol=7)
head(R.intercept,10)
index<-1 # do not understand why doing this.
#outer loop
for(macro in (1:N)){
u0j=sqrt(tau2)*rnorm(1)
age=50*runif(1)+20 #age range between 30-70
#iner loop
for(micro in (1:nj)){
xij=rnorm(1) #create level-1 predictor
z=rnorm(1) # create level-1 residual with sigma2=2
rij=sqrt(sigma2)*z;
# DV
yij=gamma00+gamma01*xij+gamma01*age+u0j+rij
R.intercept[index,1:7] <-c(macro,micro,yij,age,xij,u0j,rij)
index <- index+1
}
}
R.intercept<-as.data.frame(R.intercept)
names(R.intercept)<-c("macro","micro","yij","age","xij","u0j","rij")
head(R.intercept,10)
model1<-lmer(yij~xij+age+(1|macro),data=R.intercept,REML=FALSE)
summary(model1)
library(tidyverse)
library(mnormt)
library(lme4)
set.seed(2208)
#sample size
cn <-20 # cluster number
cs <-4 # cluster size
#fixed effect
gam <-c(0,0.5) # fix-effect, gamma 0 and gamma1
#random effect
G<-matrix(c(0.25,0,
0, 0.125), nrow=2) # tau00, tau01, tau10, tau11
sigma2 <-1 # within-person variance (1 level, sigma^2)
seq_len(cs)
xp<-cbind(1,seq_len(cs) -1) # why -1?
x <- xp[rep(seq_len(cs), cn), ]
cn_id<-seq_len(cn)
pid<-rep(cn_id, each=cs)
print(pid)
uj<-rmnorm(cn,mean=rep(0,2), varcov=G)
eij<-rnorm(cn*cs,sd=sqrt(sigma2))
## compute beta
betaj<-matrix(gam,nrow=cn,ncol=2,byrow=T)+uj
## Compute DV
y<-rowSums(x*betaj[pid,])+eij
## combine that into dataframe
sim_dat1<-tibble(y,time = x[,2],pid)
gen_data_sim <- function( cn, cs, gam, G, sigma2=1){
xp<-cbind(1,seq_len(cs) -1) # why -1?
x <- xp[rep(seq_len(cs), cn), ]
# id generation
cn_id<-seq_len(cn)
pid<-rep(cn_id, each=cs)
# random componets
uj<-rmnorm(cn,mean=rep(0,2), varcov=G)
eij<-rnorm(cn*cs,sd=sqrt(sigma2))
## compute beta
betaj<-matrix(gam,nrow=cn,ncol=2,byrow=T)+uj
## Compute DV
y<-rowSums(x*betaj[pid,])+eij
## combine that into dataframe
sim_dat1<-tibble(y,time = x[,2],pid)
## return data
return(sim_dat1)
}
gam <-c(0,0.5)
G<-matrix(c(0.25,0,
0, 0.01), nrow=2) # tau00, tau01, tau10, tau11
sigma2 <-1 # within-person variance (1 level, sigma^2)
sim_data2<-gen_data_sim(20,4,gam,G)
sim_big_sample<-gen_data_sim(200,50,gam,G) # generting sample that has larger samples
run<-function(df){
lmer(y~time + (1|pid), data=df)
}
run(sim_dat1)
run(sim_data2)
run(sim_big_sample)
set.seed(2208)
Nrep<-100 # number of replication
cn <-20 # cluster number
cs <-4 # cluster size
#fixed effect
gam <-c(0,0.5) # fix-effect, gamma 0 and gamma1
#random effect
G<-matrix(c(0.25,0,
0, 0.125), nrow=2) # tau00, tau01, tau10, tau11
sim_result<-vector("list", length=Nrep)
for (i in seq_len(Nrep)){
sim_dat <- gen_data_sim(cn,cs,gam,G)
sim_result[[i]] <- run(sim_dat)
}
#check
sim_result[[Nrep]]
# extract fixed effect
fixef(sim_result[[1]])
# standared error
sqrt(diag(vcov(sim_result[[1]])))
# confidence interval
confint(sim_result[[1]], parm="time")
fixefs_time <- map(sim_result,
~ tibble(est = fixef(.x)[2],
se = sqrt(diag(vcov(.x))[2]),
ci = confint(.x, parm = "time")) %>%
transmute(est, se, li = ci[1], ui = ci[2])) %>%
bind_rows()
## YR did not learn bias yet
#bias
summarize(fixefs_time,
ave_est=mean(est),
ave_se = mean(se),
sd_est = sd(est),
ci_coverage = mean (li <=gam[2] & ui >= gam[2])) %>%
#compuate bias and SE bias
mutate(bias = ave_est - gam[2],
rbias= bias/gam[2],
se_bias = ave_se-sd_est,
rse_bias =se_bias/sd_est,
rmse=bias^2 + sd_est^2)
View(sim_result)
View(sim_result)
fixefs_time <- map(sim_result,
~ tibble(est = sim_result[[1]][2],
se = sqrt(diag(vcov(.x))[2]),
ci = confint(.x, parm = "time")) %>%
transmute(est, se, li = ci[1], ui = ci[2])) %>%
bind_rows()
every(1:3, function(x) x > 1)
every(1:3, function(.x) .x > 1)
every(1:3, ~ .x > 1)
?every()
all_efs_time <- map(sim_result,
~ tibble(est = sim_result[[1]]%>%
[2]
all_efs_time <- map(sim_result,
~ tibble(est = sim_result[[1]]
se = sqrt(diag(vcov(.x))[2]),
all_efs_time <- map(sim_result,
~ tibble(est = sim_result[[1]],
se = sqrt(diag(vcov(.x))[2]),
ci = confint(.x, parm = "time")) %>%
transmute(est, se, li = ci[1], ui = ci[2])) %>%
bind_rows()
all_efs_time <- map(sim_result,
~ tibble(est = sim_result[[1]][2],
se = sqrt(diag(vcov(.x))[2]),
ci = confint(.x, parm = "time")) %>%
transmute(est, se, li = ci[1], ui = ci[2])) %>%
bind_rows()
all_efs_time <- map(sim_result,
~ tibble(
se = sqrt(diag(vcov(.x))[2]),
ci = confint(.x, parm = "time")) %>%
transmute(est, se, li = ci[1], ui = ci[2])) %>%
bind_rows()
all_efs_time <- map(sim_result,
~ tibble(
se = sqrt(diag(vcov(.x))[2]),
ci = confint(.x, parm = "time")) %>%
transmute(se, li = ci[1], ui = ci[2])) %>%
bind_rows()
View(sim_result)
print(sim_result[[1]])
print(sim_result[[1]][2])
print(fixef(sim_result[[1]]))
print(ranef(sim_result[[1]]))
print(ranef(sim_result[[1]]),drop=T)
print(sim_result[[1]])
hi<-sim_result[[1]]
print(hi)
print(ranef(hi,drop=T)
print(ranef(hi,drop=T)
print(ranef(hi))
install.packages('broom.mixed')
library(broom.mixed)
tidy(sim_result[[1]],effects ="fixed")
tidy()
tidy(sim_result[[1]])
?tidy()
tidy(sim_result[[1]],effects ="random")
tidy(sim_result[[1]],effects ="ran_pars")
print(fixef(hi))
tidy(sim_result[[1]],effects="fixed")
tidy(sim_result[[1]],effects ="ran_pars")
tidy(sim_result[[1]],effects ="ran_pars", scale="vcov")
fixefs_time%>%
ggplot(aes(x=est))+
geom_density()
for (i in seq_len(Nrep)){
sim_big_sample<-gen_data_sim(200,50,gam,G)
sim_result[[i]] <- run(sim_big_sample)
}
# extract fixed effect
fixef(sim_result[[1]])
# standared error
sqrt(diag(vcov(sim_result[[1]])))
# confidence interval
confint(sim_result[[1]], parm="time")
fixefs_time <- map(sim_result,
~ tibble(est = fixef(.x)[2],
se = sqrt(diag(vcov(.x))[2]),
ci = confint(.x, parm = "time")) %>%
transmute(est, se, li = ci[1], ui = ci[2])) %>%
bind_rows()
summarize(fixefs_time,
ave_est=mean(est),
ave_se = mean(se),
sd_est = sd(est),
ci_coverage = mean (li <=gam[2] & ui >= gam[2])) %>%
#compuate bias and SE bias
mutate(bias = ave_est - gam[2],
rbias= bias/gam[2],
se_bias = ave_se-sd_est,
rse_bias =se_bias/sd_est,
rmse=bias^2 + sd_est^2)
fixefs_time%>%
ggplot(aes(x=est))+
geom_density()
View(sim_big_sample)
